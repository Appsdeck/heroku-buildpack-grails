#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
# parse args
BUILD_DIR=$1
CACHE_DIR=$2

# source in common functions
. $BIN_DIR/common.sh

GRAILS_DIR=".grails"

check_build_status()
{
  if [ "${PIPESTATUS[*]}" != "0 0" ]; then
    echo " !     Failed to build app"
    exit 1
  fi
}

install_grails()
{
  VER_TO_INSTALL=$1
  GRAILS_URL="http://s3.amazonaws.com/heroku-jvm-buildpack-grails/grails-$VER_TO_INSTALL.tar.gz"

  GRAILS_TAR_FILE="grails-heroku.tar.gz"
  echo "-----> Installing Grails $VER_TO_INSTALL....."
  curl --silent --max-time 150 --location $GRAILS_URL -o $GRAILS_TAR_FILE

  # Error checking
  if [ ! -f $GRAILS_TAR_FILE ]; then
    echo "-----> Error downloading Grails framework. Please try again..."
    exit 1
  fi
  if [ -z "`file $GRAILS_TAR_FILE | grep gzip`" ]; then
    echo "-----> Error installing Grails framework or unsupported Grails framework version specified. Please review Dev Center for a list of supported versions."
    exit 1
  fi

  tar xzf $GRAILS_TAR_FILE
  rm $GRAILS_TAR_FILE

  echo "-----> Done"
}

if [ ! -f $BUILD_DIR/application.properties ] ; then
    echo "-----> File not found: application.properties. This file is required. Build failed."
    echo " !     Failed to build app"
    exit 1
fi
    
GRAILS_VERSION=$(get_property $BUILD_DIR/application.properties 'app.grails.version')

echo "-----> Grails $GRAILS_VERSION app detected"

if [ ! -d $CACHE_DIR ] ; then
  mkdir $CACHE_DIR
fi

cd $CACHE_DIR

# install grails
if [ ! -d $GRAILS_DIR ]; then
  install_grails $GRAILS_VERSION
else
  INSTALLED_GRAILS_VERSION=$(get_property $GRAILS_DIR/build.properties 'grails.version')
  if [ "$INSTALLED_GRAILS_VERSION" != "$GRAILS_VERSION" ] ; then
    echo "-----> Updating Grails version. Previous version was $INSTALLED_GRAILS_VERSION. Updating to $GRAILS_VERSION..."
    rm -rf $GRAILS_DIR
    install_grails $GRAILS_VERSION
  fi
fi

# This is a simplisitic way to only set JAVA_HOME when on Cedar. If you run this 
# script locally and your jdk is not in this location, you're responsible for
# setting it yourself. Need to find a smarter way of conditionally setting this var
if [ -d /usr/lib/jvm/java-6-openjdk ] ; then
    export JAVA_HOME=/usr/lib/jvm/java-6-openjdk
fi
export GRAILS_HOME=$CACHE_DIR/$GRAILS_DIR
export PATH=$GRAILS_HOME/bin:$PATH

cd $BUILD_DIR

# if grails cache directory doesn't exist create it
if [ ! -d $CACHE_DIR/.grails_cache ]; then
  mkdir $CACHE_DIR/.grails_cache
fi

# if a populated cache was checked in copy it into the cache
if [ -d ivy_cache ]; then
  cp -r ivy_cache $CACHE_DIR/.grails_cache/
fi

# copy the grails cache dir to the home directory where grails will use it
mkdir $HOME/.grails
if [ -f $CACHE_DIR/.grails_cache/* -o -d $CACHE_DIR/.grails_cache/* ]; then
  echo "copying grails cache from build cache to home"
  cp -r $CACHE_DIR/.grails_cache/* $HOME/.grails
fi

echo "build cache dir"
ls -al $CACHE_DIR
echo "grails cache dir"
ls -al $CACHE_DIR/.grails_cache
echo "home"
ls -al $HOME
echo ".grails in home"
ls -al $HOME/.grails

# build app
if [ "$GRAILS_VERSION" != "1.3.7" ] ; then
    BUILDCMD_OPT="-plain-output"
else
    COMPILECMD="grails -Divy.default.ivy.user.dir=$CACHE_DIR compile"
    echo "-----> Executing $COMPILECMD"
    eval "$COMPILECMD" | sed -u 's/^/       /'
    check_build_status
fi

BUILDCMD="grails $BUILDCMD_OPT -Divy.default.ivy.user.dir=$CACHE_DIR war"
echo "-----> Executing $BUILDCMD"
eval "$BUILDCMD" | sed -u 's/^/       /'
check_build_status

echo "post build home"
ls -al $HOME
echo "post build .grails in home"
ls -al $HOME/.grails

# copy the grails cache dir back into the build cache dir for use in next build
cp -r $HOME/.grails/* $CACHE_DIR/.grails_cache

echo ".grails_cache in build cache dir"
ls -al $CACHE_DIR/.grails_cache

if [ ! -d server ] ; then
    JETTY_RUNNER_VERSION=7.5.4.v20111024

    echo "-----> No server directory found. Adding jetty-runner $JETTY_RUNNER_VERSION automatically."
    mkdir server
    cp $GRAILS_HOME/jetty-runner-$JETTY_RUNNER_VERSION.jar server/jetty-runner.jar
    echo "vendored:$JETTY_RUNNER_VERSION" > server/jettyVersion
    echo "vendored:$JETTY_RUNNER_VERSION" > $CACHE_DIR/jettyVersion
fi


